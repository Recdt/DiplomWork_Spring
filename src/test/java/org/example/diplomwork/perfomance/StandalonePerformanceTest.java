package org.example.diplomwork.perfomance;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.eclipse.paho.client.mqttv3.*;
import org.eclipse.paho.client.mqttv3.persist.MemoryPersistence;
import org.java_websocket.client.WebSocketClient;
import org.java_websocket.handshake.ServerHandshake;
import org.junit.platform.commons.logging.Logger;
import org.junit.platform.commons.logging.LoggerFactory;
import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.http.*;
import org.springframework.http.client.SimpleClientHttpRequestFactory;
import org.springframework.web.client.RestTemplate;

import java.net.URI;
import java.util.*;
import java.util.concurrent.*;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;

@SpringBootApplication
public class StandalonePerformanceTest implements CommandLineRunner {
    private static final Logger log = LoggerFactory.getLogger(StandalonePerformanceTest.class);

    private static final String ESP32_IP = "192.168.0.70";
    private static final String MQTT_BROKER = "tcp://broker.mqtt.cool:1883";

    private static final String HTTP_BASE_URL = "http://" + ESP32_IP;
    private static final String WS_URL = "ws://" + ESP32_IP + ":81";
    private static final String MQTT_COMMAND_TOPIC = "esp32/command";
    private static final String MQTT_RESPONSE_TOPIC = "esp32/response";

    private final ObjectMapper objectMapper = new ObjectMapper();
    private final RestTemplate restTemplate;

    public StandalonePerformanceTest() {
        this.restTemplate = new RestTemplate();

        // –ü—Ä–∞–≤–∏–ª—å–Ω–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è timeout'—ñ–≤ –¥–ª—è Spring Boot 3.x
        SimpleClientHttpRequestFactory factory = new SimpleClientHttpRequestFactory();
        factory.setConnectTimeout(15000); // 15 —Å–µ–∫—É–Ω–¥ –Ω–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
        factory.setReadTimeout(20000);    // 20 —Å–µ–∫—É–Ω–¥ –Ω–∞ —á–∏—Ç–∞–Ω–Ω—è
        restTemplate.setRequestFactory(factory);
    }

    public static void main(String[] args) {
        System.setProperty("spring.main.web-application-type", "none");
        SpringApplication.run(StandalonePerformanceTest.class, args);
    }

    @Override
    public void run(String... args) throws Exception {
        log.info(() -> "üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—É –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ ESP32");

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ ESP32
        if (!testESP32Connection()) {
            System.err.println("‚ùå ESP32 –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π –∑–∞ –∞–¥—Ä–µ—Å–æ—é " + ESP32_IP);
            System.err.println("–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ:");
            System.err.println("1. –ß–∏ —É–≤—ñ–º–∫–Ω–µ–Ω–∏–π ESP32");
            System.err.println("2. –ß–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–∞ IP –∞–¥—Ä–µ—Å–∞");
            System.err.println("3. –ß–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω—ñ –¥–æ –æ–¥–Ω—ñ—î—ó –º–µ—Ä–µ–∂—ñ");
            return;
        }

        Scanner scanner = new Scanner(System.in);

        while (true) {
            System.out.println("\n=== ESP32 –¢–ï–°–¢ –ü–†–û–î–£–ö–¢–ò–í–ù–û–°–¢–Ü ===");
            System.out.println("1. ‚ö° –®–≤–∏–¥–∫–∏–π —Ç–µ—Å—Ç (15 –∑–∞–ø–∏—Ç—ñ–≤)");
            System.out.println("2. üìä –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π —Ç–µ—Å—Ç (30 –∑–∞–ø–∏—Ç—ñ–≤)");
            System.out.println("3. üî¨ –ü–æ–≤–Ω–∏–π —Ç–µ—Å—Ç (50 –∑–∞–ø–∏—Ç—ñ–≤)");
            System.out.println("4. üéØ HTTP —Ç–µ—Å—Ç");
            System.out.println("5. üîå WebSocket —Ç–µ—Å—Ç");
            System.out.println("6. üì° MQTT —Ç–µ—Å—Ç");
            System.out.println("7. üîç –¢–µ—Å—Ç –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è");
            System.out.println("0. –í–∏—Ö—ñ–¥");
            System.out.print("–í–∞—à –≤–∏–±—ñ—Ä: ");

            int choice = scanner.nextInt();

            switch (choice) {
                case 1 -> runPerformanceTest(15, "–®–≤–∏–¥–∫–∏–π");
                case 2 -> runPerformanceTest(30, "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π");
                case 3 -> runPerformanceTest(50, "–ü–æ–≤–Ω–∏–π");
                case 4 -> testSingleProtocol("HTTP", 25);
                case 5 -> testSingleProtocol("WebSocket", 25);
                case 6 -> testSingleProtocol("MQTT", 25);
                case 7 -> testAllConnections();
                case 0 -> {
                    System.out.println("üëã –î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è!");
                    System.exit(0);
                }
                default -> System.out.println("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä!");
            }
        }
    }

    private boolean testESP32Connection() {
        try {
            ResponseEntity<String> response = restTemplate.getForEntity(
                    HTTP_BASE_URL + "/status", String.class);
            return response.getStatusCode().is2xxSuccessful();
        } catch (Exception e) {
            return false;
        }
    }

    private void testAllConnections() {
        System.out.println("\nüîç –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≤—Å—ñ—Ö –ø—ñ–¥–∫–ª—é—á–µ–Ω—å...");

        // HTTP —Ç–µ—Å—Ç
        System.out.print("HTTP: ");
        try {
            ResponseEntity<String> response = restTemplate.getForEntity(HTTP_BASE_URL + "/status", String.class);
            if (response.getStatusCode().is2xxSuccessful()) {
                System.out.println("‚úÖ OK");
            } else {
                System.out.println("‚ùå –ü–æ–º–∏–ª–∫–∞: " + response.getStatusCode());
            }
        } catch (Exception e) {
            System.out.println("‚ùå –ü–æ–º–∏–ª–∫–∞: " + e.getMessage());
        }

        // WebSocket —Ç–µ—Å—Ç
        System.out.print("WebSocket: ");
        testWebSocketConnection();

        // MQTT —Ç–µ—Å—Ç
        System.out.print("MQTT: ");
        testMqttConnection();
    }

    private void testWebSocketConnection() {
        try {
            URI serverUri = new URI(WS_URL);
            CountDownLatch connectionLatch = new CountDownLatch(1);
            AtomicInteger result = new AtomicInteger(0);

            WebSocketClient client = new WebSocketClient(serverUri) {
                @Override
                public void onOpen(ServerHandshake handshake) {
                    result.set(1);
                    connectionLatch.countDown();
                }

                @Override
                public void onMessage(String message) {}

                @Override
                public void onClose(int code, String reason, boolean remote) {}

                @Override
                public void onError(Exception ex) {
                    result.set(-1);
                    connectionLatch.countDown();
                }
            };

            client.connect();
            boolean connected = connectionLatch.await(5, TimeUnit.SECONDS);

            if (connected && result.get() == 1) {
                System.out.println("‚úÖ OK");
                client.close();
            } else {
                System.out.println("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è");
            }
        } catch (Exception e) {
            System.out.println("‚ùå –ü–æ–º–∏–ª–∫–∞: " + e.getMessage());
        }
    }

    private void testMqttConnection() {
        try {
            String clientId = "TestConnection-" + System.currentTimeMillis();
            MqttClient testClient = new MqttClient(MQTT_BROKER, clientId, new MemoryPersistence());

            MqttConnectOptions options = new MqttConnectOptions();
            options.setCleanSession(true);
            options.setConnectionTimeout(10);
            options.setKeepAliveInterval(20);

            testClient.connect(options);

            if (testClient.isConnected()) {
                System.out.println("‚úÖ OK");
                testClient.disconnect();
                testClient.close();
            } else {
                System.out.println("‚ùå –ù–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ");
            }
        } catch (Exception e) {
            System.out.println("‚ùå –ü–æ–º–∏–ª–∫–∞: " + e.getMessage());
        }
    }

    private void runPerformanceTest(int requestCount, String testName) {
        long overallStart = System.currentTimeMillis();
        List<TestResult> results = new ArrayList<>();

        System.out.println("\nüîÑ –ó–∞–ø—É—Å–∫ " + testName + " —Ç–µ—Å—Ç—É –∑ " + requestCount + " –∑–∞–ø–∏—Ç–∞–º–∏...");
        System.out.println("‚è≥ –¶–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ –∫—ñ–ª—å–∫–∞ —Ö–≤–∏–ª–∏–Ω...\n");

        // –ü–æ—Å–ª—ñ–¥–æ–≤–Ω–µ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—ñ–≤ –∑ ESP32
        System.out.println("üåê –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è HTTP –ø—Ä–æ—Ç–æ–∫–æ–ª—É...");
        TestResult httpResult = testHttpProtocol(requestCount);
        if (httpResult != null) {
            results.add(httpResult);
            System.out.println("‚úÖ HTTP –∑–∞–≤–µ—Ä—à–µ–Ω–æ: " + httpResult.getSuccessCount() + "/" + requestCount);
            safeSleep(3000); // –ü–∞—É–∑–∞ –º—ñ–∂ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞–º–∏
        }

        System.out.println("\nüîå –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è WebSocket –ø—Ä–æ—Ç–æ–∫–æ–ª—É...");
        TestResult wsResult = testWebSocketProtocol(requestCount);
        if (wsResult != null) {
            results.add(wsResult);
            System.out.println("‚úÖ WebSocket –∑–∞–≤–µ—Ä—à–µ–Ω–æ: " + wsResult.getSuccessCount() + "/" + requestCount);
            safeSleep(3000);
        }

        System.out.println("\nüì° –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è MQTT –ø—Ä–æ—Ç–æ–∫–æ–ª—É...");
        TestResult mqttResult = testMqttProtocol(requestCount);
        if (mqttResult != null) {
            results.add(mqttResult);
            System.out.println("‚úÖ MQTT –∑–∞–≤–µ—Ä—à–µ–Ω–æ: " + mqttResult.getSuccessCount() + "/" + requestCount);
        }

        long overallEnd = System.currentTimeMillis();
        System.out.println("\n‚è±Ô∏è –ó–∞–≥–∞–ª—å–Ω–∏–π —á–∞—Å —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è: " + (overallEnd - overallStart) / 1000 + " —Å–µ–∫—É–Ω–¥");

        displayResults(results);
    }

    private void testSingleProtocol(String protocol, int requestCount) {
        System.out.println("\nüîÑ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ç—ñ–ª—å–∫–∏ " + protocol + " –ø—Ä–æ—Ç–æ–∫–æ–ª—É (" + requestCount + " –∑–∞–ø–∏—Ç—ñ–≤)...");

        TestResult result = switch (protocol) {
            case "HTTP" -> testHttpProtocol(requestCount);
            case "WebSocket" -> testWebSocketProtocol(requestCount);
            case "MQTT" -> testMqttProtocol(requestCount);
            default -> null;
        };

        if (result != null) {
            displaySingleResult(result);
        }
    }

    private TestResult testHttpProtocol(int requestCount) {
        TestResult result = new TestResult("HTTP");
        List<Long> responseTimes = Collections.synchronizedList(new ArrayList<>());
        AtomicInteger successCount = new AtomicInteger(0);
        AtomicInteger errorCount = new AtomicInteger(0);

        String[] commands = {"forward", "backward", "left", "right", "stop"};
        int[] speeds = {150, 200, 255};

        long startTime = System.currentTimeMillis();

        // –°–ø–æ—á–∞—Ç–∫—É —Ç–µ—Å—Ç—É—î–º–æ –ø—Ä–æ—Å—Ç–µ GET –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
        try {
            ResponseEntity<String> testResponse = restTemplate.getForEntity(HTTP_BASE_URL + "/status", String.class);
            if (!testResponse.getStatusCode().is2xxSuccessful()) {
                System.out.println("‚ùå HTTP server –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –Ω–∞ /status");
                result.setErrorCount(requestCount);
                return result;
            }
            System.out.println("‚úÖ HTTP server –¥–æ—Å—Ç—É–ø–Ω–∏–π");
        } catch (Exception e) {
            System.out.println("‚ùå HTTP server –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π: " + e.getMessage());
            result.setErrorCount(requestCount);
            return result;
        }

        // –¢–µ—Å—Ç—É—î–º–æ HTTP –∑–∞–ø–∏—Ç–∏ –∑ –¥–µ—Ç–∞–ª—å–Ω–∏–º –ª–æ–≥—É–≤–∞–Ω–Ω—è–º
        for (int i = 0; i < requestCount; i++) {
            try {
                String command = commands[i % commands.length];
                int speed = speeds[i % speeds.length];

                long requestStart = System.nanoTime();

                // –°–ø—Ä–æ—â–µ–Ω–∏–π JSON –¥–ª—è ESP32
                String jsonBody = String.format("{\"direction\":\"%s\",\"speed\":%d}", command, speed);

                HttpHeaders headers = new HttpHeaders();
                headers.setContentType(MediaType.APPLICATION_JSON);
                headers.set("Accept", "application/json");
                headers.set("User-Agent", "ESP32-Test-Client");
                headers.set("Connection", "close"); // –í–∞–∂–ª–∏–≤–æ –¥–ª—è ESP32!

                HttpEntity<String> entity = new HttpEntity<>(jsonBody, headers);

                // –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–µ—Ä—à–æ–≥–æ –∑–∞–ø–∏—Ç—É –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                if (i == 0) {
                    System.out.println("üîç –ü–µ—Ä—à–∏–π HTTP –∑–∞–ø–∏—Ç:");
                    System.out.println("   URL: " + HTTP_BASE_URL + "/move");
                    System.out.println("   JSON: " + jsonBody);
                    System.out.println("   Headers: " + headers);
                }

                ResponseEntity<String> response = restTemplate.exchange(
                        HTTP_BASE_URL + "/move",
                        HttpMethod.POST,
                        entity,
                        String.class
                );

                long requestEnd = System.nanoTime();
                long responseTime = (requestEnd - requestStart) / 1_000_000;

                if (response.getStatusCode().is2xxSuccessful()) {
                    responseTimes.add(responseTime);
                    successCount.incrementAndGet();
                    System.out.print("‚úì");

                    // –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–µ—Ä—à–æ—ó —É—Å–ø—ñ—à–Ω–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
                    if (i == 0) {
                        System.out.println("\n‚úÖ –ü–µ—Ä—à–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: " + response.getBody());
                    }
                } else {
                    errorCount.incrementAndGet();
                    System.out.print("‚úó");
                    if (i < 3) { // –õ–æ–≥—É—î–º–æ –ø–µ—Ä—à—ñ –ø–æ–º–∏–ª–∫–∏
                        System.out.println("\n‚ùå HTTP Error " + (i+1) + ": " + response.getStatusCode());
                        System.out.println("   Response: " + response.getBody());
                    }
                }

                // –ó–±—ñ–ª—å—à–µ–Ω–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –¥–ª—è ESP32
                safeSleep(300);

            } catch (Exception e) {
                errorCount.incrementAndGet();
                System.out.print("‚úó");

                // –î–µ—Ç–∞–ª—å–Ω–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–º–∏–ª–æ–∫
                if (i < 3) {
                    System.out.println("\n‚ùå HTTP Exception " + (i+1) + ": " + e.getClass().getSimpleName());
                    System.out.println("   Message: " + e.getMessage());

                    // –°–ø–µ—Ü—ñ–∞–ª—å–Ω–∞ –æ–±—Ä–æ–±–∫–∞ timeout –ø–æ–º–∏–ª–æ–∫
                    if (e.getMessage().contains("timeout") || e.getMessage().contains("refused")) {
                        System.out.println("   üí° –ú–æ–∂–ª–∏–≤—ñ –ø—Ä–∏—á–∏–Ω–∏:");
                        System.out.println("      - ESP32 –ø–µ—Ä–µ–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏–π");
                        System.out.println("      - –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞ IP –∞–¥—Ä–µ—Å–∞: " + ESP32_IP);
                        System.out.println("      - ESP32 –Ω–µ –∑–∞–ø—É—â–µ–Ω–∏–π –∞–±–æ –∑–∞–≤–∏—Å–ª–∏ HTTP —Å–µ—Ä–≤–µ—Ä");
                    }
                }
            }

            // –ü—Ä–æ–≥—Ä–µ—Å –∫–æ–∂–Ω—ñ 10 –∑–∞–ø–∏—Ç—ñ–≤
            if ((i + 1) % 10 == 0) {
                System.out.print(" (" + (i + 1) + "/" + requestCount + ")");
            }
        }

        long endTime = System.currentTimeMillis();
        System.out.println(); // –ù–æ–≤–∏–π —Ä—è–¥–æ–∫

        result.setTotalTime(endTime - startTime);
        result.setSuccessCount(successCount.get());
        result.setErrorCount(errorCount.get());
        result.calculateStatistics(responseTimes);

        // –î–æ–¥–∞—Ç–∫–æ–≤–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
        if (successCount.get() == 0) {
            System.out.println("\nüîç HTTP –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê:");
            System.out.println("1. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —á–∏ ESP32 —É–≤—ñ–º–∫–Ω–µ–Ω–∏–π");
            System.out.println("2. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ IP –∞–¥—Ä–µ—Å—É: " + ESP32_IP);
            System.out.println("3. –°–ø—Ä–æ–±—É–π—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä—ñ: http://" + ESP32_IP + "/status");
            System.out.println("4. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ Serial Monitor ESP32 –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –ø–æ–º–∏–ª–æ–∫");

            // –¢–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ GET –∑–∞–ø–∏—Ç—É
            try {
                System.out.println("\nüß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è GET /status...");
                ResponseEntity<String> statusResponse = restTemplate.getForEntity(HTTP_BASE_URL + "/status", String.class);
                System.out.println("‚úÖ GET –ø—Ä–∞—Ü—é—î: " + statusResponse.getStatusCode());
                System.out.println("   –í—ñ–¥–ø–æ–≤—ñ–¥—å: " + statusResponse.getBody().substring(0, Math.min(100, statusResponse.getBody().length())) + "...");
            } catch (Exception e) {
                System.out.println("‚ùå GET —Ç–∞–∫–æ–∂ –Ω–µ –ø—Ä–∞—Ü—é—î: " + e.getMessage());
            }
        }

        return result;
    }

    private TestResult testWebSocketProtocol(int requestCount) {
        TestResult result = new TestResult("WebSocket");
        List<Long> responseTimes = Collections.synchronizedList(new ArrayList<>());
        AtomicInteger successCount = new AtomicInteger(0);
        AtomicInteger errorCount = new AtomicInteger(0);
        CountDownLatch latch = new CountDownLatch(requestCount);

        try {
            URI serverUri = new URI(WS_URL);
            Map<String, Long> pendingRequests = new ConcurrentHashMap<>();
            AtomicLong messageIdCounter = new AtomicLong(0);

            WebSocketClient client = new WebSocketClient(serverUri) {
                @Override
                public void onOpen(ServerHandshake handshake) {
                    log.debug(() -> "WebSocket –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ");
                }

                @Override
                public void onMessage(String message) {
                    try {
                        JsonNode response = objectMapper.readTree(message);
                        String id = response.has("id") ? response.get("id").asText() : null;

                        if (id != null && pendingRequests.containsKey(id)) {
                            long requestStart = pendingRequests.remove(id);
                            long responseTime = (System.nanoTime() - requestStart) / 1_000_000;
                            responseTimes.add(responseTime);
                            successCount.incrementAndGet();
                            System.out.print("‚úì");
                        } else {
                            if (!pendingRequests.isEmpty()) {
                                String firstKey = pendingRequests.keySet().iterator().next();
                                Long requestStart = pendingRequests.remove(firstKey);
                                if (requestStart != null) {
                                    long responseTime = (System.nanoTime() - requestStart) / 1_000_000;
                                    responseTimes.add(responseTime);
                                    successCount.incrementAndGet();
                                    System.out.print("‚úì");
                                }
                            } else {
                                errorCount.incrementAndGet();
                                System.out.print("‚úó");
                            }
                        }
                    } catch (Exception e) {
                        errorCount.incrementAndGet();
                        System.out.print("‚úó");
                    }
                    latch.countDown();
                }

                @Override
                public void onClose(int code, String reason, boolean remote) {
                    log.debug(() -> "WebSocket –∑–∞–∫—Ä–∏—Ç–æ");
                }

                @Override
                public void onError(Exception ex) {
                    log.error(() -> "WebSocket –ø–æ–º–∏–ª–∫–∞: " + ex.getMessage());
                    while (latch.getCount() > 0) {
                        errorCount.incrementAndGet();
                        System.out.print("‚úó");
                        latch.countDown();
                    }
                }
            };

            client.connect();

            int waitCount = 0;
            while (!client.isOpen() && waitCount < 15) {
                safeSleep(500);
                waitCount++;
            }

            if (!client.isOpen()) {
                System.out.println("‚ùå WebSocket –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –Ω–µ –≤–¥–∞–ª–æ—Å—è");
                result.setErrorCount(requestCount);
                return result;
            }

            long startTime = System.currentTimeMillis();
            String[] commands = {"forward", "backward", "left", "right", "stop"};
            int[] speeds = {150, 200, 255};

            for (int i = 0; i < requestCount; i++) {
                String command = commands[i % commands.length];
                int speed = speeds[i % speeds.length];
                String id = "ws-" + messageIdCounter.incrementAndGet();

                Map<String, Object> commandData = Map.of(
                        "command", command,
                        "speed", speed,
                        "id", id
                );

                String json = objectMapper.writeValueAsString(commandData);
                pendingRequests.put(id, System.nanoTime());
                client.send(json);

                // –ü—Ä–æ–≥—Ä–µ—Å
                if ((i + 1) % 10 == 0) {
                    System.out.print(" (" + (i + 1) + "/" + requestCount + ")");
                }

                safeSleep(100); // –ó–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏
            }

            boolean completed = latch.await(90, TimeUnit.SECONDS);
            long endTime = System.currentTimeMillis();

            if (!completed) {
                int remaining = (int) latch.getCount();
                errorCount.addAndGet(remaining);
                System.out.print(" [timeout:" + remaining + "]");
            }

            client.close();
            System.out.println();

            result.setTotalTime(endTime - startTime);
            result.setSuccessCount(successCount.get());
            result.setErrorCount(errorCount.get());
            result.calculateStatistics(responseTimes);

        } catch (Exception e) {
            log.error(() -> "WebSocket —Ç–µ—Å—Ç –ø–æ–º–∏–ª–∫–∞: " + e.getMessage());
            result.setErrorCount(requestCount);
        }

        return result;
    }

    private TestResult testMqttProtocol(int requestCount) {
        TestResult result = new TestResult("MQTT");
        List<Long> responseTimes = Collections.synchronizedList(new ArrayList<>());
        AtomicInteger successCount = new AtomicInteger(0);
        AtomicInteger errorCount = new AtomicInteger(0);
        CountDownLatch latch = new CountDownLatch(requestCount);

        MqttClient mqttClient = null;

        try {
            String clientId = "SpringTest-" + System.currentTimeMillis();
            mqttClient = new MqttClient(MQTT_BROKER, clientId, new MemoryPersistence());

            Map<String, Long> pendingRequests = new ConcurrentHashMap<>();
            AtomicLong messageIdCounter = new AtomicLong(0);

            MqttConnectOptions connOpts = new MqttConnectOptions();
            connOpts.setCleanSession(true);
            connOpts.setKeepAliveInterval(60);
            connOpts.setConnectionTimeout(20);
            connOpts.setAutomaticReconnect(false);

            mqttClient.setCallback(new MqttCallback() {
                @Override
                public void connectionLost(Throwable cause) {
                    log.warn(() -> "MQTT –∑'—î–¥–Ω–∞–Ω–Ω—è –≤—Ç—Ä–∞—á–µ–Ω–æ");
                }

                @Override
                public void messageArrived(String topic, MqttMessage message) throws Exception {
                    if (MQTT_RESPONSE_TOPIC.equals(topic)) {
                        try {
                            String payload = new String(message.getPayload());
                            JsonNode response = objectMapper.readTree(payload);
                            String id = response.has("id") ? response.get("id").asText() : null;

                            if (id != null && pendingRequests.containsKey(id)) {
                                long requestStart = pendingRequests.remove(id);
                                long responseTime = (System.nanoTime() - requestStart) / 1_000_000;
                                responseTimes.add(responseTime);
                                successCount.incrementAndGet();
                                System.out.print("‚úì");
                            } else {
                                if (!pendingRequests.isEmpty()) {
                                    String firstKey = pendingRequests.keySet().iterator().next();
                                    Long requestStart = pendingRequests.remove(firstKey);
                                    if (requestStart != null) {
                                        long responseTime = (System.nanoTime() - requestStart) / 1_000_000;
                                        responseTimes.add(responseTime);
                                        successCount.incrementAndGet();
                                        System.out.print("‚úì");
                                    }
                                } else {
                                    // –Ø–∫—â–æ –Ω–µ–º–∞—î –æ—á—ñ–∫—É—é—á–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤, –ø—Ä–æ—Å—Ç–æ —Ä–∞—Ö—É—î–º–æ —è–∫ —É—Å–ø—ñ—Ö
                                    successCount.incrementAndGet();
                                    System.out.print("‚úì");
                                }
                            }
                        } catch (Exception e) {
                            errorCount.incrementAndGet();
                            System.out.print("‚úó");
                        }
                        latch.countDown();
                    }
                }

                @Override
                public void deliveryComplete(IMqttDeliveryToken token) {
                    // –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ
                }
            });

            mqttClient.connect(connOpts);

            if (!mqttClient.isConnected()) {
                System.out.println("‚ùå MQTT –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –Ω–µ –≤–¥–∞–ª–æ—Å—è");
                result.setErrorCount(requestCount);
                return result;
            }

            mqttClient.subscribe(MQTT_RESPONSE_TOPIC, 1);
            safeSleep(2000); // –ß–∞—Å –Ω–∞ –ø—ñ–¥–ø–∏—Å–∫—É

            long startTime = System.currentTimeMillis();
            String[] commands = {"forward", "backward", "left", "right", "stop"};
            int[] speeds = {150, 200, 255};

            for (int i = 0; i < requestCount; i++) {
                try {
                    String command = commands[i % commands.length];
                    int speed = speeds[i % speeds.length];
                    String id = "mqtt-" + messageIdCounter.incrementAndGet();

                    Map<String, Object> commandData = Map.of(
                            "direction", command, // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ direction —è–∫ –≤ Arduino
                            "speed", speed,
                            "id", id
                    );

                    String json = objectMapper.writeValueAsString(commandData);
                    pendingRequests.put(id, System.nanoTime());

                    MqttMessage mqttMessage = new MqttMessage(json.getBytes());
                    mqttMessage.setQos(1);
                    mqttMessage.setRetained(false);

                    mqttClient.publish(MQTT_COMMAND_TOPIC, mqttMessage);

                    // –ü—Ä–æ–≥—Ä–µ—Å
                    if ((i + 1) % 10 == 0) {
                        System.out.print(" (" + (i + 1) + "/" + requestCount + ")");
                    }

                    safeSleep(200); // –ó–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ MQTT –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏

                } catch (Exception e) {
                    errorCount.incrementAndGet();
                    System.out.print("‚úó");
                    latch.countDown();
                }
            }

            boolean completed = latch.await(120, TimeUnit.SECONDS);
            long endTime = System.currentTimeMillis();

            if (!completed) {
                int remaining = (int) latch.getCount();
                errorCount.addAndGet(remaining);
                System.out.print(" [timeout:" + remaining + "]");
            }

            System.out.println();

            result.setTotalTime(endTime - startTime);
            result.setSuccessCount(successCount.get());
            result.setErrorCount(errorCount.get());
            result.calculateStatistics(responseTimes);

        } catch (Exception e) {
            log.error(() -> "MQTT —Ç–µ—Å—Ç –ø–æ–º–∏–ª–∫–∞: " + e.getMessage());
            result.setErrorCount(requestCount);
        } finally {
            if (mqttClient != null && mqttClient.isConnected()) {
                try {
                    mqttClient.disconnect();
                    mqttClient.close();
                } catch (Exception e) {
                    log.warn(() -> "–ü–æ–º–∏–ª–∫–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è MQTT: " + e.getMessage());
                }
            }
        }

        return result;
    }

    private void safeSleep(long millis) {
        try {
            Thread.sleep(millis);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }
    }

    private void displaySingleResult(TestResult result) {
        System.out.println("\n" + "=".repeat(60));
        System.out.println("üìä " + result.getProtocol() + " –ü–†–û–¢–û–ö–û–õ - –†–ï–ó–£–õ–¨–¢–ê–¢–ò –¢–ï–°–¢–£–í–ê–ù–ù–Ø");
        System.out.println("=".repeat(60));
        System.out.printf("‚è±Ô∏è  –ó–∞–≥–∞–ª—å–Ω–∏–π —á–∞—Å: %d –º—Å (%.2f —Å–µ–∫)%n", result.getTotalTime(), result.getTotalTime() / 1000.0);
        System.out.printf("‚úÖ –£—Å–ø—ñ—à–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤: %d%n", result.getSuccessCount());
        System.out.printf("‚ùå –ü–æ–º–∏–ª–æ–∫: %d%n", result.getErrorCount());
        System.out.printf("üìà –í—ñ–¥—Å–æ—Ç–æ–∫ —É—Å–ø—ñ—à–Ω–æ—Å—Ç—ñ: %.1f%%%n", result.getSuccessRate());

        if (result.getSuccessCount() > 0) {
            System.out.printf("‚ö° –°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: %.2f –º—Å%n", result.getAverageResponseTime());
            System.out.printf("üìè –ù–∞–π—à–≤–∏–¥—à–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: %.2f –º—Å%n", result.getMinResponseTime());
            System.out.printf("üìè –ù–∞–π–ø–æ–≤—ñ–ª—å–Ω—ñ—à–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: %.2f –º—Å%n", result.getMaxResponseTime());
            System.out.printf("üìè –ú–µ–¥—ñ–∞–Ω–∞ —á–∞—Å—É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: %.2f –º—Å%n", result.getMedianResponseTime());
            System.out.printf("üöÄ –ü—Ä–æ–ø—É—Å–∫–Ω–∞ –∑–¥–∞—Ç–Ω—ñ—Å—Ç—å: %.2f –∑–∞–ø–∏—Ç—ñ–≤/—Å–µ–∫%n", result.getThroughput());
        } else {
            System.out.println("‚ö†Ô∏è  –ù–µ–º–∞—î —É—Å–ø—ñ—à–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É");
        }
    }

    private void displayResults(List<TestResult> results) {
        System.out.println("\n" + "=".repeat(80));
        System.out.println("üèÜ –ü–û–†–Ü–í–ù–Ø–õ–¨–ù–ò–ô –ê–ù–ê–õ–Ü–ó –ü–†–û–¢–û–ö–û–õ–Ü–í –ö–û–ú–£–ù–Ü–ö–ê–¶–Ü–á");
        System.out.println("=".repeat(80));

        if (results.isEmpty()) {
            System.out.println("‚ùå –ù–µ–º–∞—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è");
            return;
        }

        System.out.printf("%-12s | %-8s | %-8s | %-10s | %-12s | %-12s%n",
                "–ü—Ä–æ—Ç–æ–∫–æ–ª", "–£—Å–ø—ñ—à–Ω–æ", "–ü–æ–º–∏–ª–æ–∫", "–£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å%", "–°–µ—Ä–µ–¥.—á–∞—Å(–º—Å)", "–ü—Ä–æ–ø—É—Å–∫/—Å–µ–∫");
        System.out.println("-".repeat(80));

        for (TestResult result : results) {
            System.out.printf("%-12s | %-8d | %-8d | %-10.1f | %-12.1f | %-12.1f%n",
                    result.getProtocol(),
                    result.getSuccessCount(),
                    result.getErrorCount(),
                    result.getSuccessRate(),
                    result.getAverageResponseTime(),
                    result.getThroughput());
        }

        // –ê–Ω–∞–ª—ñ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
        List<TestResult> successfulResults = results.stream()
                .filter(r -> r.getSuccessCount() > 0)
                .toList();

        if (!successfulResults.isEmpty()) {
            System.out.println("\nüèÜ –ü–Ü–î–°–£–ú–ö–ò –¢–ï–°–¢–£–í–ê–ù–ù–Ø:");

            TestResult fastest = successfulResults.stream()
                    .min(Comparator.comparingDouble(TestResult::getAverageResponseTime))
                    .orElse(null);

            TestResult mostReliable = results.stream()
                    .max(Comparator.comparingDouble(TestResult::getSuccessRate))
                    .orElse(null);

            TestResult highestThroughput = successfulResults.stream()
                    .max(Comparator.comparingDouble(TestResult::getThroughput))
                    .orElse(null);

            if (fastest != null) {
                System.out.printf("‚ö° –ù–ê–ô–®–í–ò–î–®–ò–ô: %s (%.1f –º—Å —Å–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å)%n",
                        fastest.getProtocol(), fastest.getAverageResponseTime());
            }

            if (mostReliable != null) {
                System.out.printf("üéØ –ù–ê–ô–ù–ê–î–Ü–ô–ù–Ü–®–ò–ô: %s (%.1f%% —É—Å–ø—ñ—à–Ω—ñ—Å—Ç—å)%n",
                        mostReliable.getProtocol(), mostReliable.getSuccessRate());
            }

            if (highestThroughput != null) {
                System.out.printf("üöÄ –ù–ê–ô–í–ò–©–ê –ü–†–û–ü–£–°–ö–ù–Ü–°–¢–¨: %s (%.1f –∑–∞–ø–∏—Ç—ñ–≤/—Å–µ–∫)%n",
                        highestThroughput.getProtocol(), highestThroughput.getThroughput());
            }

            // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
            System.out.println("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–Ü–á:");
            if (fastest != null) {
                if ("HTTP".equals(fastest.getProtocol())) {
                    System.out.println("‚Ä¢ HTTP –Ω–∞–π–∫—Ä–∞—â–∏–π –¥–ª—è –ø—Ä–æ—Å—Ç–∏—Ö –∑–∞–ø–∏—Ç-–≤—ñ–¥–ø–æ–≤—ñ–¥—å –æ–ø–µ—Ä–∞—Ü—ñ–π");
                } else if ("WebSocket".equals(fastest.getProtocol())) {
                    System.out.println("‚Ä¢ WebSocket —ñ–¥–µ–∞–ª—å–Ω–∏–π –¥–ª—è —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–µ—Ä—É–≤–∞–Ω–Ω—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º—É —á–∞—Å—ñ");
                } else if ("MQTT".equals(fastest.getProtocol())) {
                    System.out.println("‚Ä¢ MQTT –æ–ø—Ç–∏–º–∞–ª—å–Ω–∏–π –¥–ª—è IoT –¥–æ–¥–∞—Ç–∫—ñ–≤ –∑ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—î—é/–ø—ñ–¥–ø–∏—Å–∫–æ—é");
                }
            }
        } else {
            System.out.println("\n‚ö†Ô∏è  –í—Å—ñ –ø—Ä–æ—Ç–æ–∫–æ–ª–∏ –ø–æ–∫–∞–∑–∞–ª–∏ –ø—Ä–æ–±–ª–µ–º–∏ –∑ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è–º");
            System.out.println("–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Å—Ç–∞–Ω ESP32 —Ç–∞ –º–µ—Ä–µ–∂–µ–≤–µ –∑'—î–¥–Ω–∞–Ω–Ω—è");
        }
    }

    // TestResult –∫–ª–∞—Å –∑ –ø–æ–≤–Ω–æ—é —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—é
    public static class TestResult {
        private final String protocol;
        private long totalTime;
        private int successCount;
        private int errorCount;
        private double averageResponseTime;
        private double minResponseTime;
        private double maxResponseTime;
        private double medianResponseTime;
        private double throughput;
        private double successRate;

        public TestResult(String protocol) {
            this.protocol = protocol;
        }

        public void calculateStatistics(List<Long> responseTimes) {
            if (responseTimes.isEmpty()) {
                this.averageResponseTime = 0;
                this.minResponseTime = 0;
                this.maxResponseTime = 0;
                this.medianResponseTime = 0;
            } else {
                this.averageResponseTime = responseTimes.stream()
                        .mapToLong(Long::longValue)
                        .average()
                        .orElse(0.0);

                this.minResponseTime = responseTimes.stream()
                        .mapToLong(Long::longValue)
                        .min()
                        .orElse(0);

                this.maxResponseTime = responseTimes.stream()
                        .mapToLong(Long::longValue)
                        .max()
                        .orElse(0);

                List<Long> sorted = new ArrayList<>(responseTimes);
                Collections.sort(sorted);
                int size = sorted.size();
                this.medianResponseTime = size % 2 == 0
                        ? (sorted.get(size/2 - 1) + sorted.get(size/2)) / 2.0
                        : sorted.get(size/2);
            }

            this.throughput = totalTime > 0 ? (successCount * 1000.0) / totalTime : 0;
            this.successRate = (successCount + errorCount) > 0
                    ? (successCount * 100.0) / (successCount + errorCount)
                    : 0;
        }

        // Getters and Setters
        public String getProtocol() { return protocol; }
        public long getTotalTime() { return totalTime; }
        public void setTotalTime(long totalTime) { this.totalTime = totalTime; }
        public int getSuccessCount() { return successCount; }
        public void setSuccessCount(int successCount) { this.successCount = successCount; }
        public int getErrorCount() { return errorCount; }
        public void setErrorCount(int errorCount) { this.errorCount = errorCount; }
        public double getAverageResponseTime() { return averageResponseTime; }
        public double getMinResponseTime() { return minResponseTime; }
        public double getMaxResponseTime() { return maxResponseTime; }
        public double getMedianResponseTime() { return medianResponseTime; }
        public double getThroughput() { return throughput; }
        public double getSuccessRate() { return successRate; }
    }
}